<#
.SYNOPSIS
  Tracks DHL shipments using the official DHL Germany API.

.DESCRIPTION
  Reads tracking numbers from a file and prints:
    - Current status
    - Delivery info
    - Full tracking history
    - Translated ICE/TTPro status codes
  Description was autogenerated by ChatGPT (OpenAI).

.PARAMETER apiKey
  Your DHL API key. Default: "YOUR-OWN-API-KEY"

.PARAMETER trackingFile
  File containing tracking numbers (one per line). Default: ".\tracking-numbers.txt"

.PARAMETER csvPath
  CSV file mapping ICE/TTPro codes to meanings. Default: ".\ICE_Event_RIC_Kombinationen_03_2023.csv" (downloaded from https://developer.dhl.com/api-reference/dhl-paket-de-sendungsverfolgung-post-paket-deutschland?language_content_entity=de&lang=de#get-started-section/)

.PARAMETER apiBaseUrl
  API URL prefix. Default: "https://api-eu.dhl.com/track/shipments?trackingNumber="

.EXAMPLE
  .\Track-DHLShipment.ps1 -apiKey "123" -trackingFile ".\track.txt"

.AUTHOR
  Tomica Kaniski, ChatGPT (OpenAI)

.LICENSE
  WTFPL - http://www.wtfpl.net
#>

param(
    [string]$apiKey = "YOUR-OWN-API-KEY",
    [string]$trackingFile = ".\assets\tracking-numbers.txt",
    [string]$csvPath = ".\assets\ICE_Event_RIC_Kombinationen_03_2023.csv",
    [string]$apiBaseUrl = "https://api-eu.dhl.com/track/shipments?trackingNumber="
)

# Helper: Safe field printing
function Show-Field {
    param (
        [string]$label,
        [string]$value,
        [ConsoleColor]$color = "White"
    )

    if ([string]::IsNullOrWhiteSpace($value)) {
        Write-Host "$label : " -NoNewline -ForegroundColor DarkGray
        Write-Host "N/A" -ForegroundColor DarkGray
    } else {
        Write-Host "$label : " -NoNewline
        Write-Host $value -ForegroundColor $color
    }
}

# Helper: Format description and link
function Convert-HtmlDescriptionToText {
    param ([string]$htmlDesc)

    if ([string]::IsNullOrWhiteSpace($htmlDesc)) { return "" }

    $urlMatch = [regex]::Match($htmlDesc, "href='([^']+)'")
    $url = if ($urlMatch.Success) { $urlMatch.Groups[1].Value } else { $null }

    $plainText = $htmlDesc -replace "<.*?>", ""
    $plainText = $plainText -replace "\s*\([^)]*https?:\/\/[^)]*\)\s*$", ""
    $plainText = $plainText.Trim()
    if (-not $plainText.EndsWith(".")) { $plainText += "." }

    if ($url) {
        return "$plainText More info at $url."
    } else {
        return $plainText
    }
}

# Helper: Status detailed description lookup
function Get-EventDescriptionFromCode {
    param (
        [string]$detailedCode,
        [object[]]$lookupTable
    )

    if (-not $detailedCode -or ($detailedCode -notmatch "_")) {
        return "Invalid or missing status code."
    }

    $parts = $detailedCode -split "_"
    if ($parts.Length -ne 3) {
        return "Invalid code format."
    }

    $match = $lookupTable | Where-Object {
        $_.ice_event_code.Trim().ToUpper() -eq $parts[0].Trim().ToUpper() -and
        $_.ice_ric_code.Trim().ToUpper() -eq $parts[1].Trim().ToUpper() -and
        $_.ttpro_event_code.Trim().ToUpper() -eq $parts[2].Trim().ToUpper()
    }

    if ($match) {
        return "$($match.ice_ric_name). $($match.ice_event_name). $($match.ttpro_event_code_meaning)..."
    } else {
        return "Unknown status code."
    }
}

# Helper: Print the latest event details
function Show-EventLatest {
    param (
        [object]$shipment,
        [object[]]$lookupTable,
        [int]$consoleWidth,
        [string]$trackingNumber
    )

    $entry = $shipment.status
    if (-not $entry.timestamp -or -not $entry.status -or -not $entry.statusDetailed -or -not $entry.description) {
        return
    }

    $timestamp = [datetime]::Parse($entry.timestamp).ToString("HH:mm:ss - dd.MM.yyyy.")
    $status = $entry.status
    $statusDetailed = $entry.statusDetailed
    $description = Convert-HtmlDescriptionToText $entry.description
    $descriptionDetailed = Get-EventDescriptionFromCode -detailedCode $statusDetailed -lookupTable $lookupTable

    $lineChar = "*"
    $lineColor = "DarkGreen"

    Write-Host ($lineChar * $consoleWidth) -ForegroundColor $lineColor
    Write-Host "Timestamp          : " -NoNewline -ForegroundColor DarkGray; Write-Host $timestamp -ForegroundColor Yellow
    Write-Host "Tracking number    : " -NoNewline; Write-Host $trackingNumber -ForegroundColor Red
    Show-Field "Service           " $shipment.service
    Show-Field "From              " $shipment.origin.address.addressLocality
    Show-Field "To                " $shipment.destination.address.addressLocality
    Write-Host "Status (short)     : " -NoNewline; Write-Host "$description ($status)" -ForegroundColor Cyan
    Write-Host "Status (detailed)  : " -NoNewline; Write-Host "$descriptionDetailed ($statusDetailed)" -ForegroundColor Magenta
    Show-Field "Estimated delivery" $shipment.estimatedTimeOfDelivery
    Write-Host ($lineChar * $consoleWidth) -ForegroundColor $lineColor
}

# Helper: Print the history events' details
function Show-EventHistory {
    param (
        [object]$entry,
        [object[]]$lookupTable,
        [int]$consoleWidth,
        [bool]$isHistory = $false
    )

    if (-not $entry.timestamp -or -not $entry.status -or -not $entry.statusDetailed -or -not $entry.description) {
        return
    }

    $timestamp = [datetime]::Parse($entry.timestamp).ToString("HH:mm:ss - dd.MM.yyyy.")
    $status = $entry.status
    $statusDetailed = $entry.statusDetailed
    $description = Convert-HtmlDescriptionToText $entry.description
    $descriptionDetailed = Get-EventDescriptionFromCode -detailedCode $statusDetailed -lookupTable $lookupTable

    $lineChar = if ($isHistory) { "-" } else { "*" }
    $lineColor = if ($isHistory) { "DarkGray" } else { "DarkGreen" }
    Write-Host ($lineChar * $consoleWidth) -ForegroundColor $lineColor

    Write-Host "Timestamp          : " -NoNewline -ForegroundColor DarkGray; Write-Host $timestamp -ForegroundColor Yellow
    Write-Host "Status (short)     : " -NoNewline -ForegroundColor DarkGray; Write-Host "$description ($status)" -ForegroundColor Cyan
    Write-Host "Status (detailed)  : " -NoNewline -ForegroundColor DarkGray; Write-Host "$descriptionDetailed ($statusDetailed)" -ForegroundColor Magenta
}

# ---- Script starts here ----
$headers = @{ "DHL-API-Key" = $apiKey }
$consoleWidth = [console]::WindowWidth
$trackingNumbers = Get-Content $trackingFile | Where-Object { $_.Trim() -ne "" }
$codeLookupCache = Import-Csv -Path $csvPath -Delimiter ";"

foreach ($trackingNumber in $trackingNumbers) {
    Write-Host "`nPACKAGE: " -NoNewline; Write-Host $trackingNumber -ForegroundColor Red
    $apiUrl = "$apiBaseUrl$trackingNumber"

    try {
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Get
        if ($response.shipments) {
            $shipment = $response.shipments[0]
            
            Show-EventLatest -shipment $shipment -lookupTable $codeLookupCache -consoleWidth $consoleWidth -trackingNumber $trackingNumber
        } else {
            Write-Host "No data found for tracking number: $trackingNumber"
        }

        if ($shipment.events.Count -gt 1) {
            Write-Host "`nHISTORY:" -ForegroundColor DarkGray
            for ($i = 0; $i -lt $shipment.events.Count - 1; $i++) {
                Show-EventHistory -entry $shipment.events[$i] -lookupTable $codeLookupCache -consoleWidth $consoleWidth -isHistory $true
            }
            Write-Host ("-" * $consoleWidth) -ForegroundColor DarkGray
        } elseif (-not $shipment.events) {
            Write-Host "No events available." -ForegroundColor Red
        }

    } catch {
        Write-Host "Error fetching tracking info for $($trackingNumber): $_"
    }
}
